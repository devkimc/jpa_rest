buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.10'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'

	id "org.asciidoctor.jvm.convert" version "3.3.2" // docs

	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10" // queryDSL
}

group = 'jparest'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

ext {
	snippetsDir = file('build/generated-snippets')
}

repositories {
	mavenCentral()
}

dependencies {

	// common
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// database
	implementation 'mysql:mysql-connector-java:8.0.29'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// jpa & queryDSL
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	implementation "com.querydsl:querydsl-apt:${queryDslVersion}"

	// security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// web
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// openApi
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:3.1.5'

	// test
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.projectlombok:lombok:1.18.22'

	// docs
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

}

test {
	useJUnitPlatform()
	outputs.dir snippetsDir
}

/* queryDSL 설정 */
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}

sourceSets {
	main.java.srcDir querydslDir
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}

compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}

/* asciidoctor 설정 */
asciidoctor {
	dependsOn test
	inputs.dir snippetsDir

	sources{
		include("**/*.adoc")
	}
}

asciidoctor.doFirst {
	delete file('src/main/resources/static/docs')
}

task copyDocument(type: Copy) {
	dependsOn asciidoctor
	from file("build/docs/asciidoc")
	into file("src/main/resources/static/docs")
}

build {		// build 시 copyDocument 실행
	dependsOn copyDocument
}
